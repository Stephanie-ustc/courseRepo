#include <message_filters/subscriber.h>
#include <message_filters/synchronizer.h>
#include <message_filters/sync_policies/approximate_time.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/CameraInfo.h>
#include <sensor_msgs/PointCloud2.h>
#include <cv_bridge/cv_bridge.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>
#include <ros/ros.h>
#include <pcl_ros/point_cloud.h>
#include <pcl/point_types.h>
#include <boost/filesystem.hpp>
#include <pcl/PCLPointCloud2.h>

typedef pcl::PointXYZRGBA PointT;
typedef pcl::PointCloud<PointT> PointCloud; 

using namespace std;
using namespace sensor_msgs;
using namespace message_filters;

ros::Publisher pointcloud_pub;


void buildPointCloud(
  const cv::Mat& depth_img_rect_reg,
  const cv::Mat& rgb_img_rect,
  const cv::Mat& intr_rect_rgb,
  PointCloud& cloud)
{
  int w = rgb_img_rect.cols;
  int h = rgb_img_rect.rows;
  
  double cx = intr_rect_rgb.at<double>(0,2);
  double cy = intr_rect_rgb.at<double>(1,2);
  double fx_inv = 1.0 / intr_rect_rgb.at<double>(0,0);
  double fy_inv = 1.0 / intr_rect_rgb.at<double>(1,1);

  cloud.resize(w*h);
  
  for (int u = 0; u < w; ++u)
  for (int v = 0; v < h; ++v)
  {
    uint16_t z = depth_img_rect_reg.at<uint16_t>(v, u);
    const cv::Vec3b& c = rgb_img_rect.at<cv::Vec3b>(v, u);
    
    PointT& pt = cloud.points[v*w + u];
    
    if (z != 0)
    {  
      double z_metric = z * 0.001;
             
      pt.x = z_metric * ((u - cx) * fx_inv);
      pt.y = z_metric * ((v - cy) * fy_inv);
      pt.z = z_metric;
  
      pt.r = c[2];
      pt.g = c[1];
      pt.b = c[0];
    }
    else
    {
      pt.x = pt.y = pt.z = std::numeric_limits<float>::quiet_NaN();
    }
  }  
  
  cloud.width = w;
  cloud.height = h;
  cloud.is_dense = true;
}

void callback(const ImageConstPtr& image_color_msg,
		const ImageConstPtr& image_depth_msg,
		const CameraInfoConstPtr& info_color_msg,
		const CameraInfoConstPtr& info_depth_msg) {
	

        boost::mutex::scoped_lock(mutex_);

	cv::Mat image_color = cv_bridge::toCvCopy(image_color_msg)->image;
	cv::Mat image_depth = cv_bridge::toCvCopy(image_depth_msg)->image;
        
        PointCloud::Ptr cloud_ptr;
        cloud_ptr.reset(new PointCloud());

        cv::Mat intr_rect_rgb_ = cv::Mat::zeros(3,3);
        intr_rect_ir.at<float>(0,2) = info_depth_msg->K[2];
        intr_rect_ir.at<float>(1,2) = info_depth_msg->K[5];
        intr_rect_ir.at<float>(0,0) = info_depth_msg->K[0];
        intr_rect_ir.at<float>(1,1) = info_depth_msg->K[4];

        buildPointCloud(
        image_depth, image_color, intr_rect_rgb_, *cloud_ptr);
        cloud_ptr->header = pcl_conversions::toPCL(image_depth_msg->header);

	pointcloud_pub.publish (cloud_ptr);
	cv::imshow("color", image_depth);

	cv::waitKey(3);
}

int main(int argc, char** argv) {
	ros::init(argc, argv, "RGBD_node");

	ros::NodeHandle nh;

	message_filters::Subscriber<Image> image_color_sub(nh,argv[1], 1);
	message_filters::Subscriber<Image> image_depth_sub(nh,argv[2], 1);
	message_filters::Subscriber<CameraInfo> info_color_sub(nh,argv[3], 1);
	message_filters::Subscriber<CameraInfo> info_depth_sub(nh,argv[4], 1);
	pointcloud_pub = nh.advertise<PointCloud> ("mypoints", 1);

	typedef sync_policies::ApproximateTime<Image, Image, CameraInfo, CameraInfo> MySyncPolicy;
	Synchronizer<MySyncPolicy> sync(MySyncPolicy(10), image_color_sub, image_depth_sub, info_color_sub, info_depth_sub);

	sync.registerCallback(boost::bind(&callback, _1, _2, _3, _4));

	ros::spin();

	return 0;
}
